*** Exercise 2.1
    :PROPERTIES:
    :CUSTOM_ID: exercise-21
    :END:

#+BEGIN_QUOTE
  What are the differences between int, long, long long, and short?
  Between an unsigned and a signed type? Between a float and a double?
#+END_QUOTE

C++ guarantees =short= and =int= is *at least* 16 bits, =long= *at
least* 32 bits, =long long= *at least* 64 bits.

The =signed= can represent positive numbers, negative numbers and zero,
while =unsigned= can only represent numbers no less than zero.

The C and C++ standards do not specify the representation of float,
double and long double. It is possible that all three implemented as
IEEE double-precision. Nevertheless, for most architectures (gcc, MSVC;
x86, x64, ARM) float is indeed a IEEE *single-precision* floating point
number (binary32), and double is a IEEE *double-precision* floating
point number (binary64).

Usage:

- Use =int= for integer arithmetic. =short= is usually too small and, in
  practice, =long= often has the same size as =int=. If your data values
  are larger than the minimum guaranteed size of an =int=, then use
  =long long=. (In a word: short < *int* < long < long long)

- Use an unsigned type when you know that the values cannot be negative.
  (In a word: no negative, unsigned.)

- Use double for floating-point computations; float usually does not
  have enough precision, and the cost of double-precision calculations
  versus single-precision is negligible. In fact, on some machines,
  double-precision operations are faster than single. The precision
  offered by long double usually is unnecessary and often entails
  considerable run-time cost. (In a word: float < *double* < long
  double)

Reference:

- [[http://www.parashift.com/c++-faq/choosing-int-size.html][What are
  the criteria for choosing between short / int / long data types?]]
- [[http://stackoverflow.com/questions/2386772/difference-between-float-and-double][Difference
  between float and double]]
- Advice: Deciding which Type to Use(This book.)

** Exercise 2.2
   :PROPERTIES:
   :CUSTOM_ID: exercise-22
   :END:

#+BEGIN_QUOTE
  To calculate a mortgage payment, what types would you use for the
  rate, principal, and payment? Explain why you selected each type.
#+END_QUOTE

use =double=, or also =float=.

The rate most like that: 4.50 % per year. The principal most like that:
$854.36 The payment most like that: $1, 142.36

Reference:

- [[http://www.bankrate.com/calculators/mortgages/mortgage-calculator.aspx][mortgage-calculator]]
- [[http://www.homeloanlearningcenter.com/mortgagebasics/whatsinamortgagepayment.htm][What's
  in a Mortgage Payment?]]

** Exercise 2.3
   :PROPERTIES:
   :CUSTOM_ID: exercise-23
   :END:

#+BEGIN_QUOTE
  What output will the following code produce?
#+END_QUOTE

#+BEGIN_SRC C++
    unsigned u = 10, u2 = 42;
    std::cout << u2 - u << std::endl;
    std::cout << u - u2 << std::endl;
    int i = 10, i2 = 42;
    std::cout << i2 - i << std::endl;
    std::cout << i - i2 << std::endl;
    std::cout << i - u << std::endl;
    std::cout << u - i << std::endl;
#+END_SRC

Output(g++ 4.8):

#+BEGIN_EXAMPLE
    32
    4294967264
    32
    -32
    0
    0
#+END_EXAMPLE

** Exercise 2.4
   :PROPERTIES:
   :CUSTOM_ID: exercise-24
   :END:

#+BEGIN_QUOTE
  Write a program to check whether your predictions were correct. If
  not, study this section until you understand what the problem is.
#+END_QUOTE

[[file:ex2_4.cpp][Here]] is the code, please test it in your computer.

** Exercise 2.5
   :PROPERTIES:
   :CUSTOM_ID: exercise-25
   :END:

#+BEGIN_QUOTE
  Determine the type of each of the following literals. Explain the
  differences among the literals in each of the four examples:
#+END_QUOTE

- (a) 'a', L'a', "a", L"a"
- (b) 10, 10u, 10L, 10uL, 012, 0xC
- (c) 3.14, 3.14f, 3.14L
- (d) 10, 10u, 10., 10e-2

(a): character literal, wide character literal, string literal, string
wide character literal.

(b): decimal, unsigned decimal, long decimal, unsigned long decimal,
octal, hexadecimal.

(c): double, float, long double.

(d): decimal, unsigned decimal, double, double.

** Exercise 2.6
   :PROPERTIES:
   :CUSTOM_ID: exercise-26
   :END:

#+BEGIN_QUOTE
  What, if any, are the differences between the following definitions:
#+END_QUOTE

#+BEGIN_SRC C++
    int month = 9, day = 7;
    int month = 09, day = 07;
#+END_SRC

The first line's integer is decimal.

The second line:

1. =int month = 09= is invalid, cause octal don't have digit =9=.
2. =day= is octal.

** Exercise 2.7
   :PROPERTIES:
   :CUSTOM_ID: exercise-27
   :END:

#+BEGIN_QUOTE
  What values do these literals represent? What type does each have?
#+END_QUOTE

- (a) "Who goes with F\145rgus?\012"
- (b) 3.14e1L
- (c) 1024f
- (d) 3.14L

(a): Who goes with Fergus?(new line) "string"

(b): 31.4 "long double"

(c): ERROR: The suffix f is valid only with floating point literals

(d): 3.14 "long double"

Reference:

- [[http://www.asciitable.com/][ASCII Table]]

** Exercise 2.8
   :PROPERTIES:
   :CUSTOM_ID: exercise-28
   :END:

#+BEGIN_QUOTE
  Using escape sequences, write a program to print 2M followed by a
  newline. Modify the program to print 2, then a tab, then an M,
  followed by a newline.
#+END_QUOTE

#+BEGIN_SRC C++
    #include <iostream>

    int main()
    {
        std::cout << 2 << "\115\012";
        std::cout << 2 << "\t\115\012";
        return 0;
    }
#+END_SRC

** Exercise 2.9
   :PROPERTIES:
   :CUSTOM_ID: exercise-29
   :END:

#+BEGIN_QUOTE
  Explain the following definitions. For those that are illegal, explain
  what's wrong and how to correct it.
#+END_QUOTE

- (a) std::cin >> int input\_value;
- (b) int i = { 3.14 };
- (c) double salary = wage = 9999.99;
- (d) int i = 3.14;

(a): error: expected '(' for function-style cast or type construction.

#+BEGIN_SRC C++
    int input_value = 0;
    std::cin >> input_value;
#+END_SRC

(b):---when you compile the code without the argument "-std=c++11", you
will get the warning below: warning: implicit conversion from 'double'
to 'int' changes value from 3.14 to 3. ---when you compile the code
using "-std=c+11", you will get a error below: error: type 'double'
cannot be narrowed to 'int' in initializer list ---conclusion:
Obviously, list initialization becomes strict in c++11.

#+BEGIN_SRC C++
    double i = { 3.14 };
#+END_SRC

(c): --if you declared 'wage' before, it's right. Otherwise, you'll get
a error: error: use of undeclared identifier 'wage'

#+BEGIN_SRC C++
    double wage;
    double salary = wage = 9999.99;
#+END_SRC

(d): ok: but value will be truncated.

#+BEGIN_SRC C++
    double i = 3.14;
#+END_SRC

** Exercise 2.10
   :PROPERTIES:
   :CUSTOM_ID: exercise-210
   :END:

#+BEGIN_QUOTE
  What are the initial values, if any, of each of the following
  variables?
#+END_QUOTE

#+BEGIN_SRC C++
    std::string global_str;
    int global_int;
    int main()
    {
        int local_int;
        std::string local_str;
    }
#+END_SRC

=global_str= is global variable, so the value is empty string.
=global_int= is global variable, so the value is zero. =local_int= is a
local variable which is uninitialized, so it has a undefined value.
=local_str= is also a local variable which is uninitialized, but it has
a value that is defined by the class. So it is empty string. PS: please
read P44 in the English version, P40 in Chinese version to get more. The
note: Uninitialized objects of built-in type defined inside a function
body have a undefined value. Objects of class type that we do not
explicitly inititalize have a value that is defined by class.

** Exercise 2.11
   :PROPERTIES:
   :CUSTOM_ID: exercise-211
   :END:

#+BEGIN_QUOTE
  Explain whether each of the following is a declaration or a
  definition:
#+END_QUOTE

- (a) extern int ix = 1024;

- (b) int iy;

- (c) extern int iz;

  (a): definition. (b): definition. (c): declaration.

** Exercise 2.12
   :PROPERTIES:
   :CUSTOM_ID: exercise-212
   :END:

#+BEGIN_QUOTE
  Which, if any, of the following names are invalid?
#+END_QUOTE

- (a) int double = 3.14;
- (b) int \_;
- (c) int catch-22;
- (d) int 1\_or\_2 = 1;
- (e) double Double = 3.14;

=a=, =c=, =d= are invalid.

** Exercise 2.13
   :PROPERTIES:
   :CUSTOM_ID: exercise-213
   :END:

#+BEGIN_QUOTE
  What is the value of j in the following program?
#+END_QUOTE

#+BEGIN_SRC C++
    int i = 42;
    int main()
    {
        int i = 100;
        int j = i;  // j: 100
    }
#+END_SRC

#+BEGIN_QUOTE
  A better example as the following
#+END_QUOTE

#+BEGIN_SRC C++
    #include <iostream>

    int i = 50;
    int main(){
      int i = 100;
      std::cout << "i in main(): " << i << std::endl;
      std::cout << "i in global scope: " << ::i << std::endl;
      return 0;
    }
#+END_SRC

#+BEGIN_EXAMPLE
    the main()'s i: 100
    the global scope' i: 50
#+END_EXAMPLE

We can reused the same identifier in a function scope, which has been
used in the global scope. The reused identifier =i= in =main()= has it's
own scope(life cycle).

The global scope =i= is visible in the =main()=.

** Exercise 2.14
   :PROPERTIES:
   :CUSTOM_ID: exercise-214
   :END:

#+BEGIN_QUOTE
  Is the following program legal? If so, what values are printed?
#+END_QUOTE

#+BEGIN_SRC C++
        int i = 100, sum = 0;
        for (int i = 0; i != 10; ++i)
            sum += i;
        std::cout << i << " " << sum << std::endl;
#+END_SRC

Legal. Output:

#+BEGIN_EXAMPLE
    100
    45
#+END_EXAMPLE

The =for= statement does have a scope. In this scope, we reused the
identifier =i= for a variable's definition(declaration and
initialization); resued the identifier =sum= for a variable's
initialization. In addition, this =i= is a different entity by comparing
it with the =i= in the first line. All the 3 =sum= are the same entity.

* 2.3 Compound Types
** 2.3.1 Reference
  :PROPERTIES:
  :CUSTOM_ID: 231-reference
  :END:

A reference is not an object. Instead, a reference is just another name for an already existing object.

A reference has to be initialized.

#+BEGIN_EXAMPLE
    int ival = 1024;
    int &refVal = ival; // refVal refers to (is another name for) ival
    int &refVal2;       // error: a reference must be initialized
#+END_EXAMPLE

A reference must be initialized by a object wit the same type, not a
literal.

#+BEGIN_EXAMPLE
    int i;
    int &refI = i;       // ok
    int &refVal4 = 10;   // error: initializer must be an object
    double dval = 3.14;
    int &refVal5 = dval; // error: initializer must be an int object
#+END_EXAMPLE

When we use a reference as an initializer, we are really using the
object to which the reference is bound.

#+BEGIN_EXAMPLE
    int i = 1;
    int &refI = i;
    int &refII = refI;
#+END_EXAMPLE

Once initialized, a reference remains bound to its initial object. There
is no way to rebind a reference to refer to a different object. Because
there is no way to rebind a reference, references must be initialized.

#+BEGIN_EXAMPLE
    int i = 1;
    int &refI = i;
    int ii = 2;
    refI = ii;
    std::cout << i << std::endl;
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    2
#+END_EXAMPLE

** Exercise 2.15
   :PROPERTIES:
   :CUSTOM_ID: exercise-215
   :END:

#+BEGIN_QUOTE
  Which of the following definitions, if any, are invalid? Why?
#+END_QUOTE

- (a) int ival = 1.01;
- (b) int &rval1 = 1.01;
- (c) int &rval2 = ival;
- (d) int &rval3;

#+BEGIN_EXAMPLE
    (a): valid.
    (b): invalid. initializer must be an object.
    (c): valid.
    (d): invalid. a reference must be initialized.
#+END_EXAMPLE

** Exercise 2.16
   :PROPERTIES:
   :CUSTOM_ID: exercise-216
   :END:

#+BEGIN_QUOTE
  Which, if any, of the following assignments are invalid? If they are
  valid, explain what they do.
#+END_QUOTE

#+BEGIN_EXAMPLE
    int i = 0, &r1 = i; double d = 0, &r2 = d;
#+END_EXAMPLE

- (a) r2 = 3.14159;
- (b) r2 = r1;
- (c) i = r2;
- (d) r1 = d;

#+BEGIN_EXAMPLE
    (a): valid. let d equal 3.14159.
    (b): valid. automatic convert will happen.
    (c): valid. but value will be truncated.
    (d): valid. but value will be truncated.
#+END_EXAMPLE

** Exercise 2.17
   :PROPERTIES:
   :CUSTOM_ID: exercise-217
   :END:

#+BEGIN_QUOTE
  What does the following code print?
#+END_QUOTE

#+BEGIN_SRC C++
    int i, &ri = i;
    i = 5; ri = 10;
    std::cout << i << " " << ri << std::endl;
#+END_SRC

#+BEGIN_EXAMPLE
    10 10
#+END_EXAMPLE

* 2.3.2 pointers
  :PROPERTIES:
  :CUSTOM_ID: 232-pointers
  :END:

declare a =int= type pointer

#+BEGIN_EXAMPLE
    int *p;
#+END_EXAMPLE

A pointer holds the address of another object. We get the address of an
object by using the address-of operator (the & operator):

initialize a =int= pointer, through a object's address

#+BEGIN_EXAMPLE
    int i = 0;
    int *p = &i;
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    int i = 0;
    int *p;
    p = &i;
#+END_EXAMPLE

initialize a =int= pointer, through a pointer

#+BEGIN_EXAMPLE
    int i = 1;
    int *p = &i;
    int *pp;
    pp = p;
#+END_EXAMPLE

When a pointer points to an object, we can use the dereference operator
(the * operator) to access that object:

read object through pointer

#+BEGIN_EXAMPLE
    int i = 0;
    int *p = &i;
    std::cout << *p << std::endl;
#+END_EXAMPLE

update object through pointer

#+BEGIN_EXAMPLE
    int i = 0;
    int *p = &i;
    *p = 2;
#+END_EXAMPLE

QUESTION: Because references are not objects, they don't have addresses.
Hence, we may not define a pointer to a reference.

#+BEGIN_EXAMPLE
    int i = 1;
    int &refI = i;
    int *pointerI = &refI;
    *pointerI = 2;         // i is 2;
#+END_EXAMPLE

QUESTION: Comparison between =Pointer= and =Reference=.

Some symbols, such as & and *, are used as both an operator in an
expression and as part of a declaration. The context in which a symbol
is used determines what the symbol means:

#+BEGIN_EXAMPLE
    int i = 42;
    int &r = i;   // & follows a type and is part of a declaration; r is a reference
    int *p;       // * follows a type and is part of a declaration; p is a pointer
    p = &i;       // & is used in an expression as the address-of operator
    *p = i;       // * is used in an expression as the dereference operator
    int &r2 = *p; // & is part of the declaration; * is the dereference operator
#+END_EXAMPLE

Initialize all Pointers

#+BEGIN_EXAMPLE
    int *p1 = nullptr; // equivalent to int *p1 = 0; c++ 11
    int *p2 = 0;       // directly initializes p2 from the literal constant 0
    int *p3 = NULL;    // equivalent to int *p3 = 0; must #include cstdlib
#+END_EXAMPLE

** Exercise 2.18
   :PROPERTIES:
   :CUSTOM_ID: exercise-218
   :END:

#+BEGIN_QUOTE
  Write code to change the value of a pointer. Write code to change the
  value to which the pointer points.
#+END_QUOTE

#+BEGIN_SRC C++
    int a = 0, b = 1;
    int *p1 = &a, *p2 = p1;

    // change the value of a pointer.
    p1 = &b;
    // change the value to which the pointer points
    *p2 = b;

#+END_SRC

** Exercise 2.19
   :PROPERTIES:
   :CUSTOM_ID: exercise-219
   :END:

#+BEGIN_QUOTE
  Explain the key differences between pointers and references.
#+END_QUOTE

**** definition:
     :PROPERTIES:
     :CUSTOM_ID: definition
     :END:

the pointer is "points to" any other type.

the reference is "another name" of an *object*.

**** key difference:
     :PROPERTIES:
     :CUSTOM_ID: key-difference
     :END:

1. a reference is another name of an *already existing* object. a
   pointer is an object in its *own right*.
2. Once initialized, a reference remains *bound to* its initial object.
   There is *no way* to rebind a reference to refer to a different
   object. a pointer can be *assigned* and *copied*.
3. a reference always get the object to which the reference was
   initially bound. a single pointer can point to *several different
   objects* over its lifetime.
4. a reference must be initialized. a pointer need *not be* initialized
   at the time it is defined.

** Exercise 2.20
   :PROPERTIES:
   :CUSTOM_ID: exercise-220
   :END:

#+BEGIN_QUOTE
  What does the following program do?
#+END_QUOTE

#+BEGIN_SRC C++
    int i = 42;
    int *p1 = &i; *p1 = *p1 * *p1;
#+END_SRC

=p1= pointer to =i=, =i='s value changed to 1764(42*42)

** Exercise 2.21
   :PROPERTIES:
   :CUSTOM_ID: exercise-221
   :END:

#+BEGIN_QUOTE
  Explain each of the following definitions. Indicate whether any are
  illegal and, if so, why.
#+END_QUOTE

#+BEGIN_EXAMPLE
    int i = 0;
#+END_EXAMPLE

- (a) double* dp = &i;
- (b) int *ip = i;
- (c) int *p = &i;

#+BEGIN_EXAMPLE
    (a): illegal, cannot initialize a variable of type 'double *' with an
          rvalue of type 'int *'
    (b): illegal, cannot initialize a variable of type 'int *' with an lvalue
          of type 'int'
    (c): legal.
#+END_EXAMPLE

** Exercise 2.22
   :PROPERTIES:
   :CUSTOM_ID: exercise-222
   :END:

Assuming p is a pointer to int, explain the following code:

#+BEGIN_SRC C++
    if (p) // ...
    if (*p) // ...
#+END_SRC

if (p) // whether p is nullptr?

if (*p) // whether the value pointed by p is zero?

** Exercise 2.23
   :PROPERTIES:
   :CUSTOM_ID: exercise-223
   :END:

#+BEGIN_QUOTE
  Given a pointer p, can you determine whether p points to a valid
  object? If so, how? If not, why not?
#+END_QUOTE

No. Because more information needed to determine whether the pointer is
valid or not.

** Exercise 2.24
   :PROPERTIES:
   :CUSTOM_ID: exercise-224
   :END:

#+BEGIN_QUOTE
  Why is the initialization of p legal but that of lp illegal?
#+END_QUOTE

#+BEGIN_SRC C++
    int i = 42;
    void *p = &i;
    long *lp = &i;
#+END_SRC

Inherited from C, =void*= is a special pointer that may point to any
type, hence the second line is legal. For type safety, C++ forbids
implicit conversions like =long *lp = &i;=, thus such code is illegal.

** Exercise 2.25
   :PROPERTIES:
   :CUSTOM_ID: exercise-225
   :END:

#+BEGIN_QUOTE
  Determine the types and values of each of the following variables.
#+END_QUOTE

- (a) int* ip, i, &r = i;
- (b) int i, *ip = 0;
- (c) int* ip, ip2;

#+BEGIN_EXAMPLE
    (a): ip is a pointer to int, i is an int, r is a reference to int i.
    (b): ip is a valid, null pointer, and i is an int.
    (c): ip is a pointer to int, and ip2 is an int.
#+END_EXAMPLE

** Exercise 2.26
   :PROPERTIES:
   :CUSTOM_ID: exercise-226
   :END:

#+BEGIN_QUOTE
  Which of the following are legal? For those that are illegal, explain
  why.
#+END_QUOTE

#+BEGIN_SRC C++
    const int buf;      // illegal, buf is uninitialized const.
    int cnt = 0;        // legal.
    const int sz = cnt; // legal.
    ++cnt;              // legal.
    ++sz;               // illegal, attempt to write to const object(sz).
#+END_SRC

** Exercise 2.27
   :PROPERTIES:
   :CUSTOM_ID: exercise-227
   :END:

#+BEGIN_QUOTE
  Which of the following initializations are legal? Explain why.
#+END_QUOTE

#+BEGIN_SRC C++
    int i = -1, &r = 0;         // illegal, r must refer to an object.
    int *const p2 = &i2;        // legal.
    const int i = -1, &r = 0;   // legal.
    const int *const p3 = &i2;  // legal.
    const int *p1 = &i2;        // legal
    const int &const r2;        // illegal, r2 is a reference that cannot be const.
    const int i2 = i, &r = i;   // legal.
#+END_SRC

** Exercise 2.28
   :PROPERTIES:
   :CUSTOM_ID: exercise-228
   :END:

#+BEGIN_QUOTE
  Explain the following definitions. Identify any that are illegal.
#+END_QUOTE

#+BEGIN_SRC C++
    int i, *const cp;       // illegal, cp must initialize.
    int *p1, *const p2;     // illegal, p2 must initialize.
    const int ic, &r = ic;  // illegal, ic must initialize.
    const int *const p3;    // illegal, p3 must initialize.
    const int *p;           // legal. a pointer to const int.
#+END_SRC

** Exercise 2.29
   :PROPERTIES:
   :CUSTOM_ID: exercise-229
   :END:

#+BEGIN_QUOTE
  Uing the variables in the previous exercise, which of the following
  assignments are legal? Explain why.
#+END_QUOTE

#+BEGIN_SRC C++
    i = ic;     // legal.
    p1 = p3;    // illegal. p3 is a pointer to const int.
    p1 = &ic;   // illegal. ic is a const int.
    p3 = &ic;   // illegal. p3 is a const pointer.
    p2 = p1;    // illegal. p2 is a const pointer.
    ic = *p3;   // illegal. ic is a const int.
#+END_SRC

** Exercise 2.30
   :PROPERTIES:
   :CUSTOM_ID: exercise-230
   :END:

#+BEGIN_QUOTE
  For each of the following declarations indicate whether the object
  being declared has top-level or low-level const.
#+END_QUOTE

#+BEGIN_SRC C++
    const int v2 = 0; int v1 = v2;
    int *p1 = &v1, &r1 = v1;
    const int *p2 = &v2, *const p3 = &i, &r2 = v2;
#+END_SRC

v2 is top-level const. p2 is low-level const. p3 is both low-level and
top-level const. r2 is low-level const.

** Exercise 2.31
   :PROPERTIES:
   :CUSTOM_ID: exercise-231
   :END:

#+BEGIN_QUOTE
  Given the declarations in the previous exercise determine whether the
  following assignments are legal. Explain how the top-level or
  low-level const applies in each case.
#+END_QUOTE

#+BEGIN_SRC C++
    r1 = v2; // legal, top-level const in v2 is ignored.
    p1 = p2; // illegal, p2 has a low-level const but p1 doesn't.
    p2 = p1; // legal, we can convert int* to const int*.
    p1 = p3; // illegal, p3 has a low-level const but p1 doesn't.
    p2 = p3; // legal, p2 has the same low-level const qualification as p3.
#+END_SRC

** Exercise 2.32
   :PROPERTIES:
   :CUSTOM_ID: exercise-232
   :END:

#+BEGIN_QUOTE
  Is the following code legal or not? If not, how might you make it
  legal?
#+END_QUOTE

#+BEGIN_EXAMPLE
    int null = 0, *p = null;
#+END_EXAMPLE

illegal.

#+BEGIN_SRC C++
    int null = 0, *p = nullptr;
#+END_SRC

** Exercise 2.33
   :PROPERTIES:
   :CUSTOM_ID: exercise-233
   :END:

#+BEGIN_QUOTE
  Using the variable definitions from this section, determine what
  happens in each of these assignments:
#+END_QUOTE

#+BEGIN_SRC C++
    a=42; // set 42 to int a.
    b=42; // set 42 to int b.
    c=42; // set 42 to int c.
    d=42; // ERROR, d is an int *. correct: *d = 42;
    e=42; // ERROR, e is an const int *. correct: e = &c;
    g=42; // ERROR, g is a const int& that is bound to ci.
#+END_SRC

** Exercise 2.34
   :PROPERTIES:
   :CUSTOM_ID: exercise-234
   :END:

#+BEGIN_QUOTE
  Write a program containing the variables and assignments from the
  previous exercise. Print the variables before and after the
  assignments to check whether your predictions in the previous exercise
  were correct. If not, study the examples until you can convince
  yourself you know ￼￼what led you to the wrong conclusion.
#+END_QUOTE

[[file:ex2_34.cpp][Here]] is the code.

** Exercise 2.35
   :PROPERTIES:
   :CUSTOM_ID: exercise-235
   :END:

#+BEGIN_QUOTE
  Determine the types deduced in each of the following definitions. Once
  you've figured out the types, write a program to see whether you were
  correct.
#+END_QUOTE

#+BEGIN_SRC C++
    const int i = 42;
    auto j = i; const auto &k = i; auto *p = &i; const auto j2 = i, &k2 = i;
#+END_SRC

j is int. k is const int&. p is const int *. j2 is const int. k2 is
const int&.

[[file:ex2_35.cpp][Here]] is the code.

** Exercise 2.36
   :PROPERTIES:
   :CUSTOM_ID: exercise-236
   :END:

#+BEGIN_QUOTE
  In the following code, determine the type of each variable and the
  value each variable has when the code finishes:
#+END_QUOTE

#+BEGIN_SRC C++
    int a = 3, b = 4;
    decltype(a) c = a;
    decltype((b)) d = a;
    ++c;
    ++d;
#+END_SRC

=c= is an int, =d= is a reference of =a=. all their value are =4=.

** Exercise 2.37
   :PROPERTIES:
   :CUSTOM_ID: exercise-237
   :END:

#+BEGIN_QUOTE
  Assignment is an example of an expression that yields a reference
  type. The type is a reference to the type of the left-hand operand.
  That is, if i is an int, then the type of the expression i = x is
  int&. Using that knowledge, determine the type and value of each
  variable in this code:
#+END_QUOTE

#+BEGIN_SRC C++
    int a = 3, b = 4;
    decltype(a) c = a;
    decltype(a = b) d = a;
#+END_SRC

=c= is an int, =d= is a reference of int. the value: a=3, b=4, c=3, d=3

** Exercise 2.38
   :PROPERTIES:
   :CUSTOM_ID: exercise-238
   :END:

#+BEGIN_QUOTE
  Describe the differences in type deduction between decltype and auto.
  Give an example of an expression where auto and decltype will deduce
  the same type and an example where they will deduce differing types.
#+END_QUOTE

The way =decltype= handles top-level const and references differs
*subtly* from the way =auto= does. Another important difference between
=decltype= and =auto= is that the deduction done by decltype depends on
the *form* of its given expression.

so the key of difference is *subtly* and *form*.

#+BEGIN_SRC C++
    int i = 0, &r = i;
    // same
    auto a = i;
    decltype(i) b = i;
    // different "c" will be int "d" will be int&
    auto c = r;
    decltype(r) d = r;
#+END_SRC

More? Look at
[[http://stackoverflow.com/questions/21369113/what-is-the-difference-between-auto-and-decltypeauto-when-returning-from-a-fun][here]]
and
[[http://stackoverflow.com/questions/12084040/decltype-vs-auto][here]]

** Exercise 2.39
   :PROPERTIES:
   :CUSTOM_ID: exercise-239
   :END:

#+BEGIN_QUOTE
  Compile the following program to see what happens when you forget the
  semicolon after a class definition. Remember the message for future
  reference.
#+END_QUOTE

#+BEGIN_SRC C++
    struct Foo { /* empty  */ } // Note: no semicolon
    int main()
    {
        return 0;
    }
#+END_SRC

Error message: [Error] expected ';' after struct definition

** Exercise 2.40
   :PROPERTIES:
   :CUSTOM_ID: exercise-240
   :END:

#+BEGIN_QUOTE
  Write your own version of the Sales\_data class.
#+END_QUOTE

#+BEGIN_SRC C++
    struct Sale_data
    {
        std::string bookNo;
        std::string bookName;
        unsigned units_sold = 0;
        double revenue = 0.0;
        double price = 0.0;
        //...
    }
#+END_SRC

** Exercise 2.41
   :PROPERTIES:
   :CUSTOM_ID: exercise-241
   :END:

#+BEGIN_QUOTE
  Use your Sales\_data class to rewrite the exercises in § 1.5.1(p. 22),
  § 1.5.2(p. 24), and § 1.6(p. 25). For now, you should define your
  Sales\_data class in the same file as your main function.
#+END_QUOTE

####1.5.1

#+BEGIN_SRC C++
    #include <iostream>
    #include <string>

    struct Sale_data
    {
        std::string bookNo;
        unsigned units_sold = 0;
        double revenue = 0.0;
    };

    int main()
    {
        Sale_data book;
        double price;
        std::cin >> book.bookNo >> book.units_sold >> price;
        book.revenue = book.units_sold * price;
        std::cout << book.bookNo << " " << book.units_sold << " " << book.revenue << " " << price;

        return 0;
    }
#+END_SRC

####1.5.2

#+BEGIN_SRC C++
    #include <iostream>
    #include <string>

    struct Sale_data
    {
        std::string bookNo;
        unsigned units_sold = 0;
        double revenue = 0.0;
    };

    int main()
    {
        Sale_data book1, book2;
        double price1, price2;
        std::cin >> book1.bookNo >> book1.units_sold >> price1;
        std::cin >> book2.bookNo >> book2.units_sold >> price2;
        book1.revenue = book1.units_sold * price1;
        book2.revenue = book2.units_sold * price2;

        if (book1.bookNo == book2.bookNo)
        {
            unsigned totalCnt = book1.units_sold + book2.units_sold;
            double totalRevenue = book1.revenue + book2.revenue;
            std::cout << book1.bookNo << " " << totalCnt << " " << totalRevenue << " ";
            if (totalCnt != 0)
                std::cout << totalRevenue / totalCnt << std::endl;
            else
                std::cout << "(no sales)" << std::endl;
            return 0;
        }
        else
        {
            std::cerr << "Data must refer to same ISBN" << std::endl;
            return -1;  // indicate failure
        }
    }
#+END_SRC

####1.6

#+BEGIN_SRC C++
    #include <iostream>
    #include <string>

    struct Sale_data
    {
        std::string bookNo;
        unsigned units_sold = 0;
        double revenue = 0.0;
    };

    int main()
    {
        Sale_data total;
        double totalPrice;
        if (std::cin >> total.bookNo >> total.units_sold >> totalPrice)
        {
            total.revenue = total.units_sold * totalPrice;

            Sale_data trans;
            double transPrice;
            while (std::cin >> trans.bookNo >> trans.units_sold >> transPrice)
            {
                trans.revenue = trans.units_sold * transPrice;

                if (total.bookNo == trans.bookNo)
                {
                    total.units_sold += trans.units_sold;
                    total.revenue += trans.revenue;
                }
                else
                {
                    std::cout << total.bookNo << " " << total.units_sold << " " << total.revenue << " ";
                    if (total.units_sold != 0)
                        std::cout << total.revenue / total.units_sold << std::endl;
                    else
                        std::cout << "(no sales)" << std::endl;

                    total.bookNo = trans.bookNo;
                    total.units_sold = trans.units_sold;
                    total.revenue = trans.revenue;
                }
            }

            std::cout << total.bookNo << " " << total.units_sold << " " << total.revenue << " ";
            if (total.units_sold != 0)
                std::cout << total.revenue / total.units_sold << std::endl;
            else
                std::cout << "(no sales)" << std::endl;

            return 0;
        }
        else
        {
            std::cerr << "No data?!" << std::endl;
            return -1;  // indicate failure
        }
    }
#+END_SRC

** Exercise 2.42
   :PROPERTIES:
   :CUSTOM_ID: exercise-242
   :END:

#+BEGIN_QUOTE
  Write your own version of the Sales\_data.h header and use it to
  rewrite the exercise from § 2.6.2(p. 76)
#+END_QUOTE

- 1.5.1. [[file:ex2_42_1.cpp][Code]]
- 1.5.2. [[file:ex2_42_2.cpp][Code]]
- 1.6. [[file:ex2_42_3.cpp][Code]]
